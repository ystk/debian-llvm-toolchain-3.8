Source: llvm-toolchain-3.8
Section: devel
Priority: optional
Maintainer: LLVM Packaging Team <pkg-llvm-team@lists.alioth.debian.org>
Uploaders: Sylvestre Ledru <sylvestre@debian.org>
Build-Depends: debhelper (>= 9.0), flex, bison, dejagnu, tcl, expect,
    cmake, perl, libtool, chrpath, texinfo, sharutils, libffi-dev (>= 3.0.9),
    lsb-release, patchutils, diffstat, xz-utils, python-dev,
    libedit-dev, swig, python-six, python-sphinx, ocaml-nox, binutils-dev,
    libjsoncpp-dev,
    lcov, procps, help2man, dh-ocaml, zlib1g-dev
Build-Conflicts: oprofile, ocaml, libllvm-3.4-ocaml-dev, libllvm-3.5-ocaml-dev,
 libllvm-3.8-ocaml-dev
Standards-Version: 3.9.8
Homepage: http://www.llvm.org/
Vcs-Svn: svn://anonscm.debian.org/svn/pkg-llvm/llvm-toolchain/branches/3.8/
Vcs-Browser: https://svn.debian.org/viewsvn/pkg-llvm/llvm-toolchain/branches/3.8/

# ------------- clang -------------

Package: clang-3.8
Architecture: any
Depends: ${shlibs:Depends}, ${misc:Depends}, ${dep:devlibs},
 libclang-common-3.8-dev (= ${binary:Version}),
 libclang1-3.8 (= ${binary:Version}), libc6-dev, binutils
Provides: c-compiler, objc-compiler, c++-compiler
Recommends: llvm-3.8-dev, python
Suggests: gnustep, gnustep-devel, clang-3.8-doc
Replaces: clang-3.1, clang-3.2, clang-3.3,
 clang-3.4 (<< 1:3.4.2-7~exp1), clang-3.5 (<< 1:3.5~+rc1-3~exp1), compiler-rt
Breaks: clang-3.1, clang-3.2, clang-3.3,
 clang-3.4 (<< 1:3.4.2-7~exp1), clang-3.5 (<< 1:3.5~+rc1-3~exp1), compiler-rt
Description: C, C++ and Objective-C compiler (LLVM based)
 Clang project is a C, C++, Objective C and Objective C++ front-end
 for the LLVM compiler. Its goal is to offer a replacement to the GNU Compiler
 Collection (GCC).
 .
 Clang fully implements all published ISO C++ standards including C++11, as
 well as the upcoming C++14 standard, and some parts of the fledgling C++1z
 standard, and is considered a production-quality C++ compiler.

Package: clang-format-3.8
Architecture: any
Depends: ${shlibs:Depends}, ${misc:Depends}, python
Replaces: clang-format-3.3
Breaks: clang-format-3.3
Description: Tool to format C/C++/Obj-C code
 Clang-format is both a library and a stand-alone tool with the goal of
 automatically reformatting C++ sources files according to configurable
 style guides. To do so, clang-format uses Clang's Lexer to transform an
 input file into a token stream and then changes all the whitespace around
 those tokens. The goal is for clang-format to both serve both as a user
 tool (ideally with powerful IDE integrations) and part of other
 refactoring tools, e.g. to do a reformatting of all the lines changed
 during a renaming.
 .
 This package also provides vim and emacs plugins.

Package: clang-tidy-3.8
Architecture: any
Depends: ${shlibs:Depends}, ${misc:Depends}, python
Replaces: clang-3.8 (<< 1:3.8~svn250696-1)
Breaks: clang-3.8 (<< 1:3.8~svn250696-1)
Description: clang-based C++ linter tool
 Provide an extensible framework for diagnosing and fixing typical programming
 errors, like style violations, interface misuse, or bugs that can be deduced
 via static analysis. clang-tidy is modular and provides a convenient interface
 for writing new checks.


Package: clang-3.8-doc
Architecture: all
Section: doc
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: C, C++ and Objective-C compiler (LLVM based) - Documentation
 Clang project is a C, C++, Objective C and Objective C++ front-end
 for the LLVM compiler. Its goal is to offer a replacement to the GNU Compiler
 Collection (GCC).
 .
 Clang fully implements all published ISO C++ standards including C++11, as
 well as the upcoming C++14 standard, and some parts of the fledgling C++1z
 standard, and is considered a production-quality C++ compiler.
 .
 This package contains the documentation.

Package: libclang1-3.8
Architecture: any
Depends: ${shlibs:Depends}, ${misc:Depends}, ${dep:devlibs}
Pre-Depends: ${misc:Pre-Depends}
Multi-Arch: same
Description: C interface to the clang library
 Clang project is a C, C++, Objective C and Objective C++ front-end
 for the LLVM compiler. Its goal is to offer a replacement to the GNU Compiler
 Collection (GCC).
 .
 Clang fully implements all published ISO C++ standards including C++11, as
 well as the upcoming C++14 standard, and some parts of the fledgling C++1z
 standard, and is considered a production-quality C++ compiler.
 .
 This package contains the clang library.
 .
 The C Interface to Clang provides a relatively small API that exposes
 facilities for parsing source code into an abstract syntax tree (AST),
 loading already-parsed ASTs, traversing the AST, associating physical source
 locations with elements within the AST, and other facilities that support
 Clang-based development tools.

Package: libclang1-3.8-dbg
Architecture: any
Multi-Arch: same
Section: debug
Priority: extra
Depends: ${shlibs:Depends}, ${misc:Depends}, ${dep:devlibs}, libclang1-3.8 (= ${binary:Version})
Description: clang library
 Clang project is a C, C++, Objective C and Objective C++ front-end
 for the LLVM compiler. Its goal is to offer a replacement to the GNU Compiler
 Collection (GCC).
 .
 Clang fully implements all published ISO C++ standards including C++11, as
 well as the upcoming C++14 standard, and some parts of the fledgling C++1z
 standard, and is considered a production-quality C++ compiler.
 .
 This package contains the debugging symbols.

Package: libclang-3.8-dev
Architecture: any
Section: libdevel
Depends: ${shlibs:Depends}, ${misc:Depends}, ${dep:devlibs},
 libclang1-3.8 (= ${binary:Version}), libclang-common-3.8-dev (= ${binary:Version})
Description: clang library - Development package
 Clang project is a C, C++, Objective C and Objective C++ front-end
 for the LLVM compiler. Its goal is to offer a replacement to the GNU Compiler
 Collection (GCC).
 .
 Clang fully implements all published ISO C++ standards including C++11, as
 well as the upcoming C++14 standard, and some parts of the fledgling C++1z
 standard, and is considered a production-quality C++ compiler.
 .
 This package contains the clang headers to develop extensions over
 libclang1-3.8.

Package: libclang-common-3.8-dev
Architecture: any
Section: libdevel
Depends: ${shlibs:Depends}, ${misc:Depends}, libllvm3.8 (= ${binary:Version})
Description: clang library - Common development package
 Clang project is a C, C++, Objective C and Objective C++ front-end
 for the LLVM compiler. Its goal is to offer a replacement to the GNU Compiler
 Collection (GCC).
 .
 Clang fully implements all published ISO C++ standards including C++11, as
 well as the upcoming C++14 standard, and some parts of the fledgling C++1z
 standard, and is considered a production-quality C++ compiler.
 .
 This package contains the clang generic headers and some libraries
 (profiling, etc).


Package: libfuzzer-3.8-dev
Architecture: any
Section: libdevel
Depends: ${shlibs:Depends}, ${misc:Depends}, clang-3.8 (= ${binary:Version})
Description: Library for coverage-guided fuzz testing
 LibFuzzer is a library for in-process, coverage-guided, evolutionary fuzzing
 of other libraries.
 .
 LibFuzzer is similar in concept to American Fuzzy Lop (AFL), but it performs
 all of its fuzzing inside a single process. This in-process fuzzing can be
 more restrictive and fragile, but is potentially much faster as there is no
 overhead for process start-up.
 .
 The fuzzer is linked with the library under test, and feeds fuzzed inputs to
 the library via a specific fuzzing entrypoint (aka 'target function'); the
 fuzzer then tracks which areas of the code are reached, and generates mutations
 on the corpus of input data in order to maximize the code coverage. The code
 coverage information for libFuzzer is provided by LLVM's SanitizerCoverage
 instrumentation.



Package: python-clang-3.8
Section: python
Architecture: any
Depends: ${shlibs:Depends}, ${misc:Depends}, python
Replaces: python-clang-3.3, python-clang-3.4, python-clang-3.5, python-clang-3.6, python-clang-3.7
Breaks: python-clang-3.3, python-clang-3.4, python-clang-3.5, python-clang-3.6, python-clang-3.7
Description: Clang Python Bindings
 Clang project is a C, C++, Objective C and Objective C++ front-end
 for the LLVM compiler. Its goal is to offer a replacement to the GNU Compiler
 Collection (GCC).
 .
 Clang fully implements all published ISO C++ standards including C++11, as
 well as the upcoming C++14 standard, and some parts of the fledgling C++1z
 standard, and is considered a production-quality C++ compiler.
 .
 This binding package provides access to the Clang compiler and libraries.


Package: clang-3.8-examples
Architecture: any
Section: doc
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: Clang examples
 Clang project is a C, C++, Objective C and Objective C++ front-end
 for the LLVM compiler. Its goal is to offer a replacement to the GNU Compiler
 Collection (GCC).
 .
 Clang fully implements all published ISO C++ standards including C++11, as
 well as the upcoming C++14 standard, and some parts of the fledgling C++1z
 standard, and is considered a production-quality C++ compiler.
 .
 This package contains the clang examples.

# ------------- LLVM -------------

Package: libllvm3.8
Architecture: any
Section: libs
Depends: ${shlibs:Depends}, ${misc:Depends}
Pre-Depends: ${misc:Pre-Depends}
Multi-Arch: same
Description: Modular compiler and toolchain technologies, runtime library
 LLVM is a collection of libraries and tools that make it easy to build
 compilers, optimizers, just-in-time code generators, and many other
 compiler-related programs.
 .
 This package contains the LLVM runtime library.

Package: libllvm3.8-dbg
Architecture: any
Section: debug
Priority: extra
Depends: ${shlibs:Depends}, ${misc:Depends}, libllvm3.8 (= ${binary:Version})
Pre-Depends: ${misc:Pre-Depends}
Multi-Arch: same
Description: Modular compiler and toolchain technologies, debugging libraries
 LLVM is a collection of libraries and tools that make it easy to build
 compilers, optimizers, just-in-time code generators, and many other
 compiler-related programs.
 .
 This package contains the LLVM runtime library debug symbols.

Package: llvm-3.8
Architecture: any
Suggests: llvm-3.8-doc
Depends: llvm-3.8-runtime (= ${binary:Version}), ${shlibs:Depends}, ${misc:Depends}
Recommends: llvm-3.8-dev
Description: Modular compiler and toolchain technologies
 LLVM is a collection of libraries and tools that make it easy to build
 compilers, optimizers, just-in-time code generators, and many other
 compiler-related programs.
 .
 LLVM uses a single, language-independent virtual instruction set both
 as an offline code representation (to communicate code between
 compiler phases and to run-time systems) and as the compiler internal
 representation (to analyze and transform programs). This persistent
 code representation allows a common set of sophisticated compiler
 techniques to be applied at compile-time, link-time, install-time,
 run-time, or "idle-time" (between program runs).
 .
 The strengths of the LLVM infrastructure are its extremely
 simple design (which makes it easy to understand and use),
 source-language independence, powerful mid-level optimizer, automated
 compiler debugging support, extensibility, and its stability and
 reliability. LLVM is currently being used to host a wide variety of
 academic research projects and commercial projects. LLVM includes C
 and C++ front-ends, a front-end for a Forth-like language (Stacker),
 a young scheme front-end, and Java support is in development. LLVM can
 generate code for X86, SparcV9, PowerPC or many other architectures.

Package: llvm-3.8-runtime
Architecture: any
Depends: binfmt-support, ${shlibs:Depends}, ${misc:Depends}
Conflicts: llvm (<< 2.7-1)
Replaces: llvm (<< 2.7-1)
Description: Modular compiler and toolchain technologies, IR interpreter
 LLVM is a collection of libraries and tools that make it easy to build
 compilers, optimizers, just-in-time code generators, and many other
 compiler-related programs.
 .
 LLVM uses a single, language-independent virtual instruction set both
 as an offline code representation (to communicate code between
 compiler phases and to run-time systems) and as the compiler internal
 representation (to analyze and transform programs). This persistent
 code representation allows a common set of sophisticated compiler
 techniques to be applied at compile-time, link-time, install-time,
 run-time, or "idle-time" (between program runs).
 .
 This package provides the minimal required to execute programs in LLVM
 format.

Package: llvm-3.8-dev
Architecture: any
Depends: ${shlibs:Depends}, libffi-dev (>= 3.0.9), ${misc:Depends},
 llvm-3.8 (= ${binary:Version}), libllvm3.8 (= ${binary:Version}), libtinfo-dev
Replaces: llvm (<< 2.2-3)
Description: Modular compiler and toolchain technologies, libraries and headers
 LLVM is a collection of libraries and tools that make it easy to build
 compilers, optimizers, just-in-time code generators, and many other
 compiler-related programs.
 .
 LLVM uses a single, language-independent virtual instruction set both
 as an offline code representation (to communicate code between
 compiler phases and to run-time systems) and as the compiler internal
 representation (to analyze and transform programs). This persistent
 code representation allows a common set of sophisticated compiler
 techniques to be applied at compile-time, link-time, install-time,
 run-time, or "idle-time" (between program runs).
 .
 This package provides the libraries and headers to develop applications
 using llvm.

Package: llvm-3.8-tools
Architecture: any
Depends: ${shlibs:Depends}, ${misc:Depends}, python,
 llvm-3.8-dev (= ${binary:Version})
Description: Modular compiler and toolchain technologies, tools
 LLVM is a collection of libraries and tools that make it easy to build
 compilers, optimizers, just-in-time code generators, and many other
 compiler-related programs.
 .
 LLVM uses a single, language-independent virtual instruction set both
 as an offline code representation (to communicate code between
 compiler phases and to run-time systems) and as the compiler internal
 representation (to analyze and transform programs). This persistent
 code representation allows a common set of sophisticated compiler
 techniques to be applied at compile-time, link-time, install-time,
 run-time, or "idle-time" (between program runs).
 .
 This package provides tools for testing.

Package: libllvm-3.8-ocaml-dev
Section: ocaml
Architecture: any
Suggests: llvm-3.8-doc
Depends: ${shlibs:Depends}, ${misc:Depends}, ${ocaml:Depends}, llvm-3.8-dev (= ${binary:Version})
Provides: ${ocaml:Provides}
Description: Modular compiler and toolchain technologies, OCaml bindings
 LLVM is a collection of libraries and tools that make it easy to build
 compilers, optimizers, just-in-time code generators, and many other
 compiler-related programs.
 .
 LLVM uses a single, language-independent virtual instruction set both
 as an offline code representation (to communicate code between
 compiler phases and to run-time systems) and as the compiler internal
 representation (to analyze and transform programs). This persistent
 code representation allows a common set of sophisticated compiler
 techniques to be applied at compile-time, link-time, install-time,
 run-time, or "idle-time" (between program runs).
 .
 This package provides the OCaml bindings to develop applications using llvm.

Package: llvm-3.8-doc
Section: doc
Architecture: all
Depends: ${misc:Depends}, libjs-jquery, libjs-underscore
Description: Modular compiler and toolchain technologies, documentation
 LLVM is a collection of libraries and tools that make it easy to build
 compilers, optimizers, just-in-time code generators, and many other
 compiler-related programs.
 .
 LLVM uses a single, language-independent virtual instruction set both
 as an offline code representation (to communicate code between
 compiler phases and to run-time systems) and as the compiler internal
 representation (to analyze and transform programs). This persistent
 code representation allows a common set of sophisticated compiler
 techniques to be applied at compile-time, link-time, install-time,
 run-time, or "idle-time" (between program runs).
 .
 This package contains all documentation (extensive).

Package: llvm-3.8-examples
Section: doc
Architecture: all
Depends: ${misc:Depends}, llvm-3.8-dev (>= ${source:Version}), llvm-3.8-dev (<< ${source:Version}+c~)
Description: Modular compiler and toolchain technologies, examples
 LLVM is a collection of libraries and tools that make it easy to build
 compilers, optimizers, just-in-time code generators, and many other
 compiler-related programs.
 .
 LLVM uses a single, language-independent virtual instruction set both
 as an offline code representation (to communicate code between
 compiler phases and to run-time systems) and as the compiler internal
 representation (to analyze and transform programs). This persistent
 code representation allows a common set of sophisticated compiler
 techniques to be applied at compile-time, link-time, install-time,
 run-time, or "idle-time" (between program runs).
 .
 This package contains examples for using LLVM, both in developing
 extensions to LLVM and in using it to compile code.


# ------------- lldb -------------

Package: lldb-3.8
Architecture: amd64 armel armhf i386  kfreebsd-amd64 kfreebsd-i386 s390 sparc alpha hppa m68k powerpcspe sh4 x32 mips mipsel arm64
# ia64 hurd powerpc ppc64el sparc64  ppc64  mips64el  have been removed
Depends: ${shlibs:Depends}, ${misc:Depends}, libllvm3.8 (= ${binary:Version}), llvm-3.8-dev
Suggests: python-lldb-3.8
Conflicts: lldb-3.4, lldb-3.5
Pre-Depends: ${misc:Pre-Depends}
Description: Next generation, high-performance debugger
 LLDB is a next generation, high-performance debugger. It is built as a set of
 reusable components which highly leverage existing libraries in the larger LLVM
 Project, such as the Clang expression parser and LLVM disassembler.

Package: liblldb-3.8
Architecture: amd64 armel armhf i386  kfreebsd-amd64 kfreebsd-i386 s390 sparc alpha hppa m68k powerpcspe sh4 x32 mips mipsel arm64
# ia64 hurd powerpc ppc64el sparc64 ppc64 mips64el have been removed
Depends: ${shlibs:Depends}, ${misc:Depends}, libllvm3.8 (= ${binary:Version})
Pre-Depends: ${misc:Pre-Depends}
Section: libs
Replaces: lldb-3.8 (<= 1:3.8~svn215195-2)
Breaks: lldb-3.8 (<< 1:3.8~svn215195-2)
Description: Next generation, high-performance debugger, library
 LLDB is a next generation, high-performance debugger. It is built as a set of
 reusable components which highly leverage existing libraries in the larger LLVM
 Project, such as the Clang expression parser and LLVM disassembler.
 .
 This package contains the LLDB runtime library.

Package: liblldb-3.8-dbg
Architecture: amd64 armel armhf i386  kfreebsd-amd64 kfreebsd-i386 s390 sparc hppa m68k powerpcspe sh4 x32 mips mipsel arm64
# ia64 hurd ppc64el alpha s390x powerpc sparc64  ppc64 mips64el have been removed
Depends: ${shlibs:Depends}, ${misc:Depends}, liblldb-3.8 (= ${binary:Version})
Pre-Depends: ${misc:Pre-Depends}
Section: debug
Priority: extra
Description: Next generation, high-performance debugger, debugging libraries
 LLDB is a next generation, high-performance debugger. It is built as a set of
 reusable components which highly leverage existing libraries in the larger LLVM
 Project, such as the Clang expression parser and LLVM disassembler.
 .
 This package contains the LLDB runtime library debug symbols.


Package: python-lldb-3.8
Section: python
Architecture: amd64 armel armhf i386 kfreebsd-amd64 kfreebsd-i386 s390 sparc alpha hppa m68k powerpcspe sh4 x32 mips mipsel arm64
Depends: ${shlibs:Depends}, ${misc:Depends}, liblldb-3.8-dev, python, python-six
Conflicts: python-lldb-3.4, python-lldb-3.5, python-lldb-3.6, python-lldb-3.7
Pre-Depends: ${misc:Pre-Depends}
Description: Next generation, high-performance debugger, python lib
 LLDB is a next generation, high-performance debugger. It is built as a set of
 reusable components which highly leverage existing libraries in the larger LLVM
 Project, such as the Clang expression parser and LLVM disassembler.
 .
 This binding package provides access to lldb.


Package: liblldb-3.8-dev
Section: libdevel
Architecture: amd64 armel armhf i386 kfreebsd-amd64 kfreebsd-i386 s390 sparc alpha hppa m68k powerpcspe sh4 x32 mips mipsel arm64
# ia64 hurd powerpc ppc64el sparc64  ppc64 mips64el  have been removed
Depends: ${shlibs:Depends}, ${misc:Depends}, lldb-3.8 (= ${binary:Version})
Replaces: lldb-3.8-dev (<= 1:3.8~svn215195-2)
Breaks: lldb-3.8-dev (<< 1:3.8~svn215195-2)
Pre-Depends: ${misc:Pre-Depends}
Description: Next generation, high-performance debugger - Header files
 LLDB is a next generation, high-performance debugger. It is built as a set of
 reusable components which highly leverage existing libraries in the larger LLVM
 Project, such as the Clang expression parser and LLVM disassembler.
 .
 This package provides the header files to build extension over lldb.


Package: lldb-3.8-dev
Depends: liblldb-3.8-dev, ${misc:Depends}
Architecture: all
Section: oldlibs
Description: transitional dummy package to liblldb-3.8-dev
 This is a transitional dummy package. It can safely be removed.
